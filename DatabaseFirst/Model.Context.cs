

//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------


namespace DatabaseFirst
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class trainingsEntities : DbContext
{
    public trainingsEntities()
        : base("name=trainingsEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<chislo> chisloes { get; set; }

    public virtual DbSet<comment> comments { get; set; }

    public virtual DbSet<deistvit> deistvits { get; set; }

    public virtual DbSet<drob> drobs { get; set; }

    public virtual DbSet<exercise> exercises { get; set; }

    public virtual DbSet<forma> formas { get; set; }

    public virtual DbSet<kolich> koliches { get; set; }

    public virtual DbSet<lexic> lexics { get; set; }

    public virtual DbSet<lexicAll> lexicAlls { get; set; }

    public virtual DbSet<lexicology> lexicologies { get; set; }

    public virtual DbSet<lico> licoes { get; set; }

    public virtual DbSet<morphem> morphems { get; set; }

    public virtual DbSet<morphology> morphologies { get; set; }

    public virtual DbSet<naklon> naklons { get; set; }

    public virtual DbSet<naricat> naricats { get; set; }

    public virtual DbSet<neizman> neizmen { get; set; }

    public virtual DbSet<odush> odushes { get; set; }

    public virtual DbSet<padezh> padezhs { get; set; }

    public virtual DbSet<part> parts { get; set; }

    public virtual DbSet<perehod> perehods { get; set; }

    public virtual DbSet<podrazryad> podrazryads { get; set; }

    public virtual DbSet<progress> progresses { get; set; }

    public virtual DbSet<proizvodnost> proizvodnosts { get; set; }

    public virtual DbSet<prost> prosts { get; set; }

    public virtual DbSet<razryad> razryads { get; set; }

    public virtual DbSet<razryadpoznach> razryadpoznaches { get; set; }

    public virtual DbSet<razryadznach> razryadznaches { get; set; }

    public virtual DbSet<rod> rods { get; set; }

    public virtual DbSet<sklonen> sklonens { get; set; }

    public virtual DbSet<sochinit> sochinits { get; set; }

    public virtual DbSet<spryazh> spryazhs { get; set; }

    public virtual DbSet<stepsrav> stepsravs { get; set; }

    public virtual DbSet<syll_mirror> syll_mirror { get; set; }

    public virtual DbSet<sysdiagram> sysdiagrams { get; set; }

    public virtual DbSet<theme> themes { get; set; }

    public virtual DbSet<training> trainings { get; set; }

    public virtual DbSet<upotrebl> upotrebls { get; set; }

    public virtual DbSet<vid> vids { get; set; }

    public virtual DbSet<vozvrat> vozvrats { get; set; }

    public virtual DbSet<vremya> vremyas { get; set; }

    public virtual DbSet<word> words { get; set; }

    public virtual DbSet<znacobraz> znacobrazs { get; set; }

    public virtual DbSet<lexic_view> lexic_view { get; set; }

    public virtual DbSet<lexicIds_view> lexicIds_view { get; set; }

    public virtual DbSet<morphology_view> morphology_view { get; set; }

    public virtual DbSet<nextView> nextViews { get; set; }

    public virtual DbSet<nextView1> nextView1 { get; set; }

    public virtual DbSet<part1> part1 { get; set; }

    public virtual DbSet<progressUser> progressUsers { get; set; }

    public virtual DbSet<Teacher> Teachers { get; set; }

    public virtual DbSet<TeachU> TeachUs { get; set; }

    public virtual DbSet<Them> Thems { get; set; }

    public virtual DbSet<wordsList> wordsLists { get; set; }

    public virtual DbSet<wordsListAll> wordsListAlls { get; set; }

    public virtual DbSet<wordsMorphologyId> wordsMorphologyIds { get; set; }

    public virtual DbSet<wordsName> wordsNames { get; set; }

    public virtual DbSet<wordsPartsId> wordsPartsIds { get; set; }

    public virtual DbSet<wordsView> wordsViews { get; set; }


    public virtual ObjectResult<Procedure_Result> Procedure(Nullable<int> param1, Nullable<int> param2)
    {

        var param1Parameter = param1.HasValue ?
            new ObjectParameter("param1", param1) :
            new ObjectParameter("param1", typeof(int));


        var param2Parameter = param2.HasValue ?
            new ObjectParameter("param2", param2) :
            new ObjectParameter("param2", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Procedure_Result>("Procedure", param1Parameter, param2Parameter);
    }


    public virtual ObjectResult<progressPro_Result> progressPro(string param1)
    {

        var param1Parameter = param1 != null ?
            new ObjectParameter("param1", param1) :
            new ObjectParameter("param1", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<progressPro_Result>("progressPro", param1Parameter);
    }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    public virtual int sp_upgraddiagrams()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }


    public virtual int InsStud(string id1, string id2)
    {

        var id1Parameter = id1 != null ?
            new ObjectParameter("id1", id1) :
            new ObjectParameter("id1", typeof(string));


        var id2Parameter = id2 != null ?
            new ObjectParameter("id2", id2) :
            new ObjectParameter("id2", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsStud", id1Parameter, id2Parameter);
    }


    public virtual int RemStud(string id1, string id2)
    {

        var id1Parameter = id1 != null ?
            new ObjectParameter("id1", id1) :
            new ObjectParameter("id1", typeof(string));


        var id2Parameter = id2 != null ?
            new ObjectParameter("id2", id2) :
            new ObjectParameter("id2", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemStud", id1Parameter, id2Parameter);
    }

}

}

